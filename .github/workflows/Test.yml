name: Test and Coverage

on: [push]

jobs:
  Test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Run unit tests
#        run: python -m unittest discover tests/unit *.py
        run: |
          python -m unittest tests.unit.Instantiate

  Coverage:
    name: Collect Coverage Data
    runs-on: ubuntu-latest
    env:
      PYTHON: 3.8
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Collect coverage
        if: ${{ always() }}
#        run: coverage run -m unittest discover tests/unit *.py
        run: |
          coverage run -m unittest tests.unit.Instantiate

      - name: Report coverage
        if: ${{ always() }}
        run: |
          coverage report
          coverage xml

      - name: Publish coverage at CodeCov
        if: ${{ always() }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: PYTHON

      - name: Publish coverage at Codacy
        if: ${{ always() }}
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml

  TriggerNext:
    name: Collect coverage data
    needs: [Test, Coverage]
    runs-on: ubuntu-latest
    env:
      PYTHON: 3.8
    steps:
      - name: Trigger Release Workflow
        if: startsWith(github.ref, 'refs/tags')
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TRIGGER_TOKEN }}
          repository: vhdl/pyVHDLModel
          event-type: doRelease
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
